import React, { useState, useRef } from 'react';
import { View,ScrollView, StyleSheet, TextInput, TouchableOpacity } from 'react-native';
import QR from '../component/QR';
import { calcHeight } from '../helper/res';
import ViewShot from 'react-native-view-shot';
import * as Sharing from 'expo-sharing';
import * as ImagePicker from 'expo-image-picker';
import * as FileSystem from 'expo-file-system';
import { EvilIcons,AntDesign } from '@expo/vector-icons'; 

export default function QRCodeGenerator() {
  const [qrCodeContent, setQRCodeContent] = useState('');
  const [backgroundImage, setBackgroundImage] = useState(null);
  const qrCodeView = useRef(null);

  const shareQrCode = async (imageUri) => {
    const cacheUri = `${FileSystem.cacheDirectory}qrCode.jpg`;

    await FileSystem.copyAsync({ from: imageUri, to: cacheUri });

    const shareOptions = {
      title: 'Share QR Code',
      url: cacheUri,
      message: 'QR Code generated by your app',
    };

    try {
      const shared = await Sharing.shareAsync(cacheUri, shareOptions);

      if (shared.action === Sharing.sharedAction) {
        console.log('Shared successfully');
      } else {
        console.error('Error sharing:', shared.error);
      }
    } catch (error) {
      console.error('Error sharing:', error);
    }
  };

  const captureQrCode = async () => {
    if (qrCodeView.current) {
      try {
        const uri = await qrCodeView.current.capture();
        console.log('Image saved to', uri);
        shareQrCode(uri);
      } catch (error) {
        console.error('Error capturing QR code:', error);
      }
    }
  };

  const selectImage = async () => {
    const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
  
    if (permissionResult.granted) {
      const result = await ImagePicker.launchImageLibraryAsync();
  
      if (result.assets && result.assets.length > 0 && result.assets[0].uri) {
        const selectedImagePath = result.assets[0].uri;
  
        try {
          const fileInfo = await FileSystem.getInfoAsync(selectedImagePath);
  
          if (fileInfo.exists) {
            setBackgroundImage(selectedImagePath);
          } else {
            console.error('Source image does not exist.');
          }
        } catch (error) {
          console.error('Error selecting image:', error);
        }
      } else {
        console.log('Image selection canceled or result.uri is null.');
      }
    } else {
      console.log('Permission to access media library not granted.');
    }
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <TextInput
        style={styles.input}
        placeholder="Enter text to generate QR code"
        onChangeText={(text) => setQRCodeContent(text)}
        value={qrCodeContent}
        numberOfLines={10}
      />


      <ViewShot options={{ format: 'jpg', quality: 0.9 }} ref={qrCodeView}>
        {backgroundImage ? (
          <QR qrCodeContent={qrCodeContent} backgroundImage={{ uri: backgroundImage }} />
        ) : (
          <QR qrCodeContent={qrCodeContent} />
        )}
      </ViewShot>
      {qrCodeContent && (
  <View style={styles.iconContainer}>
    <TouchableOpacity
      style={{ flex: 1, justifyContent: 'center',
      alignItems: 'center' }}
      onPress={selectImage}
    >
      <EvilIcons name="image" size={50} color="black" />
    </TouchableOpacity>
    <TouchableOpacity
      style={{ flex: 1,justifyContent: 'center',
      alignItems: 'center' }}
      onPress={captureQrCode}
    >
     <AntDesign name="sharealt" size={50} color="black"  />
    </TouchableOpacity>
  </View>
)}

    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    alignItems: 'center',
    justifyContent: 'center', // Center content vertically
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: calcHeight(10), // Add margin to the input
    paddingHorizontal: 10,
    width: '100%',
    height: calcHeight(10),
  },
  iconContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    margin: calcHeight(5), // Add margin above the icons
    width: '100%'
  },
});
