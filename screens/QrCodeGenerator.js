import React, { useState, useRef } from 'react';
import { View, StyleSheet, TextInput, Button } from 'react-native';
import QR from '../component/QR';
import { calcHeight } from '../helper/res';
import ViewShot from 'react-native-view-shot';
import * as Sharing from 'expo-sharing';
import * as FileSystem from 'expo-file-system';
import {
  launchCamera,
  launchImageLibrary,
  CameraOptions,
  ImageLibraryOptions,
} from 'react-native-image-picker';

export default function QRCodeGenerator() {
  const [qrCodeContent, setQRCodeContent] = useState('');
  const [backgroundImage, setBackgroundImage] = useState(null);
  const qrCodeView = useRef(null);

  const shareQrCode = async (imageUri) => {
    const cacheUri = `${FileSystem.cacheDirectory}qrCode.jpg`;

    await FileSystem.copyAsync({ from: imageUri, to: cacheUri });

    const shareOptions = {
      title: 'Share QR Code',
      url: cacheUri,
      message: `QR Code generated by your app`,
    };

    try {
      const shared = await Sharing.shareAsync(cacheUri, shareOptions);

      if (shared.action === Sharing.sharedAction) {
        console.log('Shared successfully');
      } else {
        console.error('Error sharing:', shared.error);
      }
    } catch (error) {
      console.error('Error sharing:', error);
    }
  };

  const captureQrCode = async () => {
    if (qrCodeView.current) {
      try {
        const uri = await qrCodeView.current.capture();
        console.log('Image saved to', uri);
        shareQrCode(uri);
      } catch (error) {
        console.error('Error capturing QR code:', error);
      }
    }
  };

  const selectImage = () => {
    const options = {
      title: 'Select Background Image',
      storageOptions: {
        skipBackup: true,
        path: 'images',
      },
    };

    launchImageLibrary(options, (response) => {
      if (response.uri) {
        setBackgroundImage(response.uri);
      }
    });
  };

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.input}
        placeholder="Enter text to generate QR code"
        onChangeText={(text) => {
          setQRCodeContent(text);
        }}
        value={qrCodeContent}
        numberOfLines={10}
      />
      {/* <Button title="Select Background Image" onPress={selectImage} /> */}
      <ViewShot options={{ format: 'jpg', quality: 0.9 }} ref={qrCodeView}>
        <QR qrCodeContent={qrCodeContent} backgroundImage={backgroundImage} />
      </ViewShot>
      {qrCodeContent && <Button title="Share QR Code" onPress={captureQrCode} />}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    alignItems: 'center',
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 10,
    paddingHorizontal: 10,
    width: '100%',
    height: calcHeight(20),
  },
});
