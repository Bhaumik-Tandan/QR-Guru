import React, { useState, useRef } from 'react';
import { View,ScrollView, StyleSheet, TextInput, TouchableOpacity,Text } from 'react-native';
import QRDisplay from '../component/QRDisplay';
import { calcHeight, calcWidth } from '../helper/res';
import * as Sharing from 'expo-sharing';
import getLocalImage from '../helper/getLocalImage';
import * as FileSystem from 'expo-file-system';    
import getQrDataFromImage from '../helper/getQrDataFromImage'; 
import IconButtons from '../component/IconButtons';     

export default function QRCodeGenerator() {
  const [qrCodeContent, setQRCodeContent] = useState('');
  const [backgroundImage, setBackgroundImage] = useState(null);
  const qrCodeView = useRef(null);

  const clearBackgroundImage = () => {
    setBackgroundImage(null);
  };

  const shareQrCode = async (imageUri) => {
    const cacheUri = `${FileSystem.cacheDirectory}qrCode.jpg`;

    await FileSystem.copyAsync({ from: imageUri, to: cacheUri });

    const shareOptions = {
      title: 'Share QR Code',
      url: cacheUri,
      message: 'QR Code generated by your app',
    };

    try {
      const shared = await Sharing.shareAsync(cacheUri, shareOptions);

      if (shared.action === Sharing.sharedAction) {
        console.log('Shared successfully');
      } else {
        console.error('Error sharing:', shared.error);
      }
    } catch (error) {
      console.error('Error sharing:', error);
    }
  };

  const captureQrCode = async () => {
    if (qrCodeView.current) {
      try {
        const uri = await qrCodeView.current.capture();
        console.log('Image saved to', uri);
        shareQrCode(uri);
      } catch (error) {
        console.error('Error capturing QR code:', error);
      }
    }
  };

  const validateQrCodeContent = async () => {
    if (qrCodeView.current) {
      try {
        const uri = await qrCodeView.current.capture();
        const qrData=await getQrDataFromImage(uri);
        if(qrData.length==0){
          alert("Image is not fit for QR code");
        }
      } catch (error) {
        console.error('Error capturing QR code:', error);
      }
    }
  }

  async function selectImage() {
    try {
      const localImageUri = await getLocalImage();
      setBackgroundImage(localImageUri);
      setTimeout(() => {
      validateQrCodeContent();
      }, 1000);
    } catch (error) {
      console.error('Error selecting image:', error);
    }
  }

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <TextInput
        style={styles.input}
        placeholder="Enter text to generate QR code"
        onChangeText={(text) => setQRCodeContent(text)}
        value={qrCodeContent}
        numberOfLines={10}
      />


       <QRDisplay qrCodeContent={qrCodeContent} backgroundImage={backgroundImage} qrCodeView={qrCodeView} />
       {qrCodeContent && (
        <IconButtons
          selectImage={selectImage}
          captureQrCode={captureQrCode}
          clearBackgroundImage={clearBackgroundImage}
          backgroundImage={backgroundImage}
        />
      )}

    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: calcHeight(5),
    alignItems: 'center',
    justifyContent: 'center', // Center content vertically
  },
  input: {
    height: calcHeight(10),
    borderColor: 'gray',
    borderWidth: calcWidth(0.25),
    marginBottom: calcHeight(2), // Add margin to the input
    paddingHorizontal: calcWidth(2),
    width: '100%',
    height: calcHeight(10),
  }
});
