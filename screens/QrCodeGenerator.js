import React, { useState, useRef } from 'react';
import { View, StyleSheet, TextInput, Button } from 'react-native';
import QR from '../component/QR';
import { calcHeight } from '../helper/res';
import ViewShot from 'react-native-view-shot';
import * as Sharing from 'expo-sharing';
import * as ImagePicker from 'expo-image-picker';
import * as FileSystem from 'expo-file-system';






export default function QRCodeGenerator() {
  // State for QR code content and background image
  const [qrCodeContent, setQRCodeContent] = useState('');
  const [backgroundImage, setBackgroundImage] = useState(null);
  console.log(require('../assets/back.jpg'));

  // Reference to capture QR code view
  const qrCodeView = useRef(null);

  // Function to share the generated QR code
  const shareQrCode = async (imageUri) => {
    const cacheUri = `${FileSystem.cacheDirectory}qrCode.jpg`;

    await FileSystem.copyAsync({ from: imageUri, to: cacheUri });

    const shareOptions = {
      title: 'Share QR Code',
      url: cacheUri,
      message: 'QR Code generated by your app',
    };

    try {
      const shared = await Sharing.shareAsync(cacheUri, shareOptions);

      if (shared.action === Sharing.sharedAction) {
        console.log('Shared successfully');
      } else {
        console.error('Error sharing:', shared.error);
      }
    } catch (error) {
      console.error('Error sharing:', error);
    }
  };

  // Function to capture the QR code
  const captureQrCode = async () => {
    if (qrCodeView.current) {
      try {
        const uri = await qrCodeView.current.capture();
        console.log('Image saved to', uri);
        shareQrCode(uri);
      } catch (error) {
        console.error('Error capturing QR code:', error);
      }
    }
  };

  const selectImage = async () => {
    const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
  
    if (permissionResult.granted) {
      const result = await ImagePicker.launchImageLibraryAsync();
  
      if (result.assets && result.assets.length > 0 && result.assets[0].uri) {
        const selectedImagePath = result.assets[0].uri;
  
        try {
          // Check if the source file exists
          const fileInfo = await FileSystem.getInfoAsync(selectedImagePath);
  
          if (fileInfo.exists) {
            // Set the selected image as the background
            setBackgroundImage(selectedImagePath);
          } else {
            console.error('Source image does not exist.');
          }
        } catch (error) {
          console.error('Error selecting image:', error);
        }
      } else {
        console.log('Image selection canceled or result.uri is null.');
      }
    } else {
      console.log('Permission to access media library not granted.');
    }
  };
  


  return (
    <View style={styles.container}>
      {/* Input for QR code content */}
      <TextInput
        style={styles.input}
        placeholder="Enter text to generate QR code"
        onChangeText={(text) => {
          setQRCodeContent(text);
        }}
        value={qrCodeContent}
        numberOfLines={10}
      />

      {/* Button to select a background image */}
      <Button title="Select Background Image" onPress={selectImage} />

      {/* View for capturing the QR code with optional background image */}
      <ViewShot options={{ format: 'jpg', quality: 0.9 }} ref={qrCodeView}>
  {backgroundImage ? (
    <QR qrCodeContent={qrCodeContent} backgroundImage={{ uri: backgroundImage }} />
  ) : (
    <QR qrCodeContent={qrCodeContent} />
  )}
</ViewShot>


      {/* Button to share the generated QR code */}
      {qrCodeContent && <Button title="Share QR Code" onPress={captureQrCode} />}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    alignItems: 'center',
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 10,
    paddingHorizontal: 10,
    width: '100%',
    height: calcHeight(10),
  },
});
